{
	"info": {
		"_postman_id": "0715d0e9-d517-4da1-9487-8d7ff65b3ef9",
		"name": "udacity-fsnd-udaspicelatte",
		"description": "This project \"Coffee Shop\" is a new digitally enabled Cafe for students to order drinks, socialize, and study hard. But they need help setting up their menu experience. It shows my knowledge about building APIs in Flask, I used in implementing Authentication, Authorization and Permissions. There are three main users of this web application which are the public, the Barista and Manager.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19466503"
	},
	"item": [
		{
			"name": "public",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						},
						"description": "This endpoint returns the available drinks from the database and a success value. The expected status code is 200 because this endpoint requires no authentication or permission."
					},
					"response": [
						{
							"name": "/drinks",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"drinks\": [\r\n        {\r\n            \"id\": 3,\r\n            \"recipe\": [\r\n                {\r\n                    \"color\": [\r\n                        \"color\"\r\n                    ],\r\n                    \"parts\": [\r\n                        \"parts\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"title\": \"Mozos-light\"\r\n        },\r\n        {\r\n            \"id\": 4,\r\n            \"recipe\": [\r\n                {\r\n                    \"color\": [\r\n                        \"color\"\r\n                    ],\r\n                    \"parts\": [\r\n                        \"parts\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"title\": \"Mozos\"\r\n        }\r\n    ],\r\n    \"success\": true\r\n}"
						}
					]
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks-detail"
							]
						},
						"description": "This endpoint returns the details of all available drinks from the database and a success value. The expected status code is 401 because this endpoint requires an authorization header and permission."
					},
					"response": [
						{
							"name": "/drinks-detail",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks-detail",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks-detail"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error\": 401,\r\n    \"message\": \"Authorization header is expected.\",\r\n    \"success\": false\r\n}"
						}
					]
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						},
						"description": "This endpoint can be used to create a new drink. Upon successful creation, it returns the details of the newly created drink and a success value. The expected status code is 401 because this endpoint requires an authorization header and permission"
					},
					"response": [
						{
							"name": "/drinks",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error\": 401,\r\n    \"message\": \"Authorization header is expected.\",\r\n    \"success\": false\r\n}"
						}
					]
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						},
						"description": "This endpoint can be used to edit new drink. It returns the details of the edited drink and a success value. The expected status code is 401 because this endpoint requires an authorization header and permission"
					},
					"response": [
						{
							"name": "/drinks/1",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks/1",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks",
										"1"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error\": 401,\r\n    \"message\": \"Authorization header is expected.\",\r\n    \"success\": false\r\n}"
						}
					]
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						},
						"description": "Deletes a drink of the given ID if it exists. Returns the id of the deleted drink and a success value. The expected status code is 401 because this endpoint requires an authorization header and permission."
					},
					"response": [
						{
							"name": "/drinks/1",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks/1",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks",
										"1"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"error\": 401,\n    \"message\": \"Authorization header is expected.\",\n    \"success\": false\n}"
						}
					]
				}
			],
			"description": "Public are users/guests without an account, they can't be authenticated and have no permissions. Public users can only see available drinks."
		},
		{
			"name": "barista",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpdXpicjNhcVpHRkg3ek9yX3FhUyJ9.eyJpc3MiOiJodHRwczovL25hbm8tZGVncmVlLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MmM2ZDljNWVlMmNjNjQ4MzZhMzYzYTMiLCJhdWQiOiJjb2ZmZWUiLCJpYXQiOjE2NTc3MDc4NjYsImV4cCI6MTY1NzcxNTA2NiwiYXpwIjoiNU9SdW5URkFyb0RpRGtHVDFUN05HWlpOTDRaZURCU1EiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImdldDpkcmlua3MiLCJnZXQ6ZHJpbmtzLWRldGFpbCJdfQ.bRnESHS69fxiJcFBprajc8TbQH2Me3xhHqKF0-rdfNKKKWBRsFzMRw0QGYLHX4uyHH1YK1rxNv-PCIo4on4i-SyfnmxvA_AdfZgAgmbWFnxioCxeKPFrmSwzuARFylq2kkFTcb5PZttolSFFVJqnw-gzSahwv69Yhb-eaUgDAu6D55hyETBWWnKMRnB32uoT_vfV5ZXY59jNs9Yv03MQmCvdfjQOtRwrApSXIVqzSBJ92jVvFKgX2kuuyysfF4VjsI6zuhuihFueKg2ivnBywMMVubOLA3VlZOzFjXone-TNi5NCyjgGNwveaS9pZv4qQLqTP6KIMDCzb82UheSHZg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						},
						"description": "This endpoint returns the available drinks from the database and a success value. The expected status code is 200 because this endpoint requires no authentication or permission."
					},
					"response": [
						{
							"name": "/drinks",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"drinks\": [\r\n        {\r\n            \"id\": 3,\r\n            \"recipe\": [\r\n                {\r\n                    \"color\": [\r\n                        \"color\"\r\n                    ],\r\n                    \"parts\": [\r\n                        \"parts\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"title\": \"Mozos-light\"\r\n        },\r\n        {\r\n            \"id\": 4,\r\n            \"recipe\": [\r\n                {\r\n                    \"color\": [\r\n                        \"color\"\r\n                    ],\r\n                    \"parts\": [\r\n                        \"parts\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"title\": \"Mozos\"\r\n        }\r\n    ],\r\n    \"success\": true\r\n}"
						}
					]
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks-detail"
							]
						},
						"description": "This endpoint returns the details of all available drinks from the database and a success value. The expected status code is 200 because a barista has the permission to get drinks detail."
					},
					"response": [
						{
							"name": "/drinks-detail",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks-detail",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks-detail"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"drinks\": [\r\n        {\r\n            \"id\": 3,\r\n            \"recipe\": {\r\n                \"color\": \"pink\",\r\n                \"name\": \"Mustard Flavour and cream\",\r\n                \"parts\": 1\r\n            },\r\n            \"title\": \"Mozos-light\"\r\n        },\r\n        {\r\n            \"id\": 4,\r\n            \"recipe\": {\r\n                \"color\": \"pink\",\r\n                \"name\": \"Mustard\",\r\n                \"parts\": 1\r\n            },\r\n            \"title\": \"Mozos\"\r\n        }\r\n    ],\r\n    \"success\": true\r\n}"
						}
					]
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						},
						"description": "This endpoint can be used to create a new drink. Upon successful creation, it returns the details of the newly created drink and a success value. The expected status code is 403 because this endpoint requires a post:drinks permission."
					},
					"response": [
						{
							"name": "/drinks",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error\": 403,\r\n    \"message\": \"forbidden\",\r\n    \"success\": false\r\n}"
						}
					]
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						},
						"description": "This endpoint can be used to edit new drink. It returns the details of the edited drink and a success value. The expected status code is 403 because this endpoint requires a patch:drinks permission."
					},
					"response": [
						{
							"name": "/drinks/1",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host}}/drinks/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"drinks",
										"1"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"error\": 403,\n    \"message\": \"forbidden\",\n    \"success\": false\n}"
						}
					]
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						},
						"description": "Deletes a drink of the given ID if it exists. Returns the id of the deleted drink and a success value. The expected status code is 403 because this endpoint requires a delete:drinks permission."
					},
					"response": [
						{
							"name": "/drinks/1",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks/1",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks",
										"1"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error\": 403,\r\n    \"message\": \"forbidden\",\r\n    \"success\": false\r\n}"
						}
					]
				}
			],
			"description": "A Barista is an authenticated user and has permissions to get drinks and drinks detail.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpdXpicjNhcVpHRkg3ek9yX3FhUyJ9.eyJpc3MiOiJodHRwczovL25hbm8tZGVncmVlLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MmM2ZDljNWVlMmNjNjQ4MzZhMzYzYTMiLCJhdWQiOiJjb2ZmZWUiLCJpYXQiOjE2NTc4MTcxOTksImV4cCI6MTY1NzgyNDM5OSwiYXpwIjoiNU9SdW5URkFyb0RpRGtHVDFUN05HWlpOTDRaZURCU1EiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImdldDpkcmlua3MiLCJnZXQ6ZHJpbmtzLWRldGFpbCJdfQ.PNo_RaWUn9QHM8gYZdagKHbPSrgod7_jxNch3l2yX_hmQs46hkiA2QyrTL4xlc7gcm5o2-5K0TRTy7veoH1bhwOiFJm0W5fN9wiORpPrmP4HtUHBc_YaJTcRv5jIe8e53Jfz0YR2P5_UYRWzThYG5WZBNmIUZvMFUW5rwFUrPPFB_roVd0bEy_Ffiib5pqBKhSwn5bjGR0RebUAVT-e8Rq5MLHhJHkmg7OewSrxQu42r7gQqYEYzBc6cQxFnuulwQKgcqD8anGEjyM0kRz5N_F_AzfWf4JZDyMiDLTOw2MePCtNpSf4vwKUGqladvtDE8-g8LY9ImWBbujXci8T_FQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "manager",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						},
						"description": "This endpoint returns the available drinks from the database and a success value. The expected status code is 200."
					},
					"response": [
						{
							"name": "/drinks",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"drinks\": [\r\n        {\r\n            \"id\": 3,\r\n            \"recipe\": [\r\n                {\r\n                    \"color\": [\r\n                        \"color\"\r\n                    ],\r\n                    \"parts\": [\r\n                        \"parts\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"title\": \"Mozos-light\"\r\n        },\r\n        {\r\n            \"id\": 4,\r\n            \"recipe\": [\r\n                {\r\n                    \"color\": [\r\n                        \"color\"\r\n                    ],\r\n                    \"parts\": [\r\n                        \"parts\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"title\": \"Mozos\"\r\n        }\r\n    ],\r\n    \"success\": true\r\n}"
						}
					]
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks-detail"
							]
						},
						"description": "This endpoint returns the details of all available drinks from the database and a success value. The expected status code is 200."
					},
					"response": [
						{
							"name": "/drinks-detail",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks-detail",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks-detail"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"drinks\": [\n        {\n            \"id\": 3,\n            \"recipe\": {\n                \"color\": \"pink\",\n                \"name\": \"Mustard Flavour and cream\",\n                \"parts\": 1\n            },\n            \"title\": \"Mozos-light\"\n        },\n        {\n            \"id\": 4,\n            \"recipe\": {\n                \"color\": \"pink\",\n                \"name\": \"Mustard\",\n                \"parts\": 1\n            },\n            \"title\": \"Mozos\"\n        }\n    ],\n    \"success\": true\n}"
						}
					]
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Sprite\",\n    \"recipe\": {\n        \"name\": \"White Sugar\",\n        \"color\": \"yellow\",\n        \"parts\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						},
						"description": "This endpoint returns the details of all available drinks from the database and a success value. The expected status code is 200."
					},
					"response": [
						{
							"name": "/drinks",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Black Jack\",\n    \"recipe\": {\n        \"name\": \"Black Jack\",\n        \"color\": \"Black\",\n        \"parts\": 1\n    }\n}"
								},
								"url": {
									"raw": "localhost:5000/drinks",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"drinks\": [\r\n        {\r\n            \"id\": 4,\r\n            \"recipe\": {\r\n                \"color\": \"pink\",\r\n                \"name\": \"Mustard\",\r\n                \"parts\": 1\r\n            },\r\n            \"title\": \"Mozos\"\r\n        }\r\n    ],\r\n    \"success\": true\r\n}"
						}
					]
				},
				{
					"name": "/drinks/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mozos-light\",\n    \"recipe\": {\n        \"name\": \"Mustard Flavour\",\n        \"color\": \"pink\",\n        \"parts\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/drinks/3",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"3"
							]
						},
						"description": "This endpoint can be used to edit new drink. It returns the details of the edited drink and a success value. The expected status code is 200."
					},
					"response": [
						{
							"name": "/drinks/3",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 3,\n    \"title\": \"Flora Black\"\n}"
								},
								"url": {
									"raw": "localhost:5000/drinks/1",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks",
										"1"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"drinks\": [\r\n        {\r\n            \"id\": 3,\r\n            \"recipe\": {\r\n                \"color\": \"pink\",\r\n                \"name\": \"Mustard Flavour and cream\",\r\n                \"parts\": 1\r\n            },\r\n            \"title\": \"Mozos-light\"\r\n        }\r\n    ],\r\n    \"success\": true\r\n}"
						}
					]
				},
				{
					"name": "/drinks/4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/4",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"4"
							]
						},
						"description": "Deletes a drink of the given id if it exists. Returns the id of the deleted drink and a success value. The expected status code is 200."
					},
					"response": [
						{
							"name": "/drinks/4",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:5000/drinks/1",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"drinks",
										"1"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"delete\": 2,\r\n    \"success\": true\r\n}"
						}
					]
				}
			],
			"description": "A Manager is an authenticated and authorized user that is permitted to perform all actions.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpdXpicjNhcVpHRkg3ek9yX3FhUyJ9.eyJpc3MiOiJodHRwczovL25hbm8tZGVncmVlLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MmM4NTExNTkxNjBkYWNjMjMxMWEwZjQiLCJhdWQiOiJjb2ZmZWUiLCJpYXQiOjE2NTc4MTcxNTIsImV4cCI6MTY1NzgyNDM1MiwiYXpwIjoiNU9SdW5URkFyb0RpRGtHVDFUN05HWlpOTDRaZURCU1EiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTpkcmlua3MiLCJnZXQ6ZHJpbmtzIiwiZ2V0OmRyaW5rcy1kZXRhaWwiLCJwYXRjaDpkcmlua3MiLCJwb3N0OmRyaW5rcyJdfQ.KEZ6f1F_0hw0WX-YNRuryW5MKG4jSfkaOcNJxswA--r_bgTc87d0_OLdwaIC5ZSbdjzknCp-VD37pht5wNgoxXw6Iu5blQouW_dfsPLBfuI9m6zqHFhs-EUz_jN1MsVS-dl0GHPW4Gw3FjhktxHt5ssyiRyNz0alVkmVTB5HBwLhGxWgTYeNrEuKVZGPXtQQAQkJ2xJMVFxPtVWymIOrr1mJkmnvLwRQhBWYNs2xI36eVO8HDyFup33J7NVKX0JajPU2-Gc7Mg5S-uFxpA4c1NnfsKAoyUxAD9vP9EmSB88UWI7KiY2Fwi73w7QLFjCyk2ojXk-CYLSecZfV0y4DDA",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000",
			"type": "string"
		}
	]
}